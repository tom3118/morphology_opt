"""
Tom Temple 7/6/2011
tom.temple@vecna.com
"""

from numpy import zeros,array,linalg,arctan2,dot,cross,eye


def loadAmplOutputFile(filename):
  """
  A utility for parsing ampl output generated by:
  ampl:display{i in 1.._nvars} (_varname[i],_var[i]) >filename;

  returns a python dictionary of numpy arrays
  """

  fd = open(filename)
  dat = fd.read()
  fd.close()
  d1 = [d.split() for d in dat.splitlines()]
  d1 = [d for d in d1 if len(d) == 3]

  def getCoords(_s):
    return _s[_s.find('[')+1:_s.find(']')]
  def getVar(_s):
    return _s[1:_s.find('[')]

  d2 = [[getVar(db)] + map(int,getCoords(db).split(','))+ [float(dc)] 
        for da,db,dc in d1]
  varnames = set([d[0] for d in d2])
  vardict = dict([(name,[d[1:] for d in d2 if d[0] == name]) 
                  for name in varnames])
  retdict = {}
  for k,v in vardict.items():
    shapev = v[-1][:-1]
    retv = zeros(shapev)
    for row in v:
      retv.__setitem__(tuple(array(row[:-1])-1),row[-1])
    retdict[k] = retv
  return retdict

#output = loadAmplOutputFile('8linkhole.ampl.out')

def stateFromJoints(x,prev_=array([0,0,-1]),T0=eye(3)):
  """
  @param x: N x 3 array of positions
  """
  #prev = array([0,0,-1])
  origin = zeros(3)
  prev = dot(T0,prev_)
  ret = []
  for curr in x:
    c = (dot(curr-origin,origin-prev)/
         (linalg.norm(curr-origin)*linalg.norm(origin-prev)))
    s = (linalg.norm(cross(curr-origin,origin-prev))/
         (linalg.norm(curr-origin)*linalg.norm(origin-prev)))
    ret.append(arctan2(s,c))
    prev,origin = origin,curr
  return array(ret)

def trajFromJoints(x):
  """
  """
  return array([stateFromJoints(x[:,:,i]) for i in range(len(x[0,0]))])


